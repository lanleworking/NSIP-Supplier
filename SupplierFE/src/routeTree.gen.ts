/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SupplierRouteRouteImport } from './routes/supplier.route'
import { Route as ResetPasswordRouteRouteImport } from './routes/reset-password.route'
import { Route as RequestRouteRouteImport } from './routes/request.route'
import { Route as RegisterRouteRouteImport } from './routes/register.route'
import { Route as RecoverRouteRouteImport } from './routes/recover.route'
import { Route as NotFoundRouteRouteImport } from './routes/not-found.route'
import { Route as LoginRouteRouteImport } from './routes/login.route'
import { Route as IndexRouteRouteImport } from './routes/index.route'
import { Route as SupplierIndexRouteImport } from './routes/supplier/index'
import { Route as RequestIndexRouteImport } from './routes/request/index'
import { Route as SupplierEditIndexRouteImport } from './routes/supplier/edit/index'
import { Route as RequestRequestIdIndexRouteImport } from './routes/request/$requestId/index'

const SupplierRouteRoute = SupplierRouteRouteImport.update({
  id: '/supplier',
  path: '/supplier',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordRouteRoute = ResetPasswordRouteRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const RequestRouteRoute = RequestRouteRouteImport.update({
  id: '/request',
  path: '/request',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRouteRoute = RegisterRouteRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const RecoverRouteRoute = RecoverRouteRouteImport.update({
  id: '/recover',
  path: '/recover',
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundRouteRoute = NotFoundRouteRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SupplierIndexRoute = SupplierIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SupplierRouteRoute,
} as any)
const RequestIndexRoute = RequestIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RequestRouteRoute,
} as any)
const SupplierEditIndexRoute = SupplierEditIndexRouteImport.update({
  id: '/edit/',
  path: '/edit/',
  getParentRoute: () => SupplierRouteRoute,
} as any)
const RequestRequestIdIndexRoute = RequestRequestIdIndexRouteImport.update({
  id: '/$requestId/',
  path: '/$requestId/',
  getParentRoute: () => RequestRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/login': typeof LoginRouteRoute
  '/not-found': typeof NotFoundRouteRoute
  '/recover': typeof RecoverRouteRoute
  '/register': typeof RegisterRouteRoute
  '/request': typeof RequestRouteRouteWithChildren
  '/reset-password': typeof ResetPasswordRouteRoute
  '/supplier': typeof SupplierRouteRouteWithChildren
  '/request/': typeof RequestIndexRoute
  '/supplier/': typeof SupplierIndexRoute
  '/request/$requestId': typeof RequestRequestIdIndexRoute
  '/supplier/edit': typeof SupplierEditIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/login': typeof LoginRouteRoute
  '/not-found': typeof NotFoundRouteRoute
  '/recover': typeof RecoverRouteRoute
  '/register': typeof RegisterRouteRoute
  '/reset-password': typeof ResetPasswordRouteRoute
  '/request': typeof RequestIndexRoute
  '/supplier': typeof SupplierIndexRoute
  '/request/$requestId': typeof RequestRequestIdIndexRoute
  '/supplier/edit': typeof SupplierEditIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRouteRoute
  '/login': typeof LoginRouteRoute
  '/not-found': typeof NotFoundRouteRoute
  '/recover': typeof RecoverRouteRoute
  '/register': typeof RegisterRouteRoute
  '/request': typeof RequestRouteRouteWithChildren
  '/reset-password': typeof ResetPasswordRouteRoute
  '/supplier': typeof SupplierRouteRouteWithChildren
  '/request/': typeof RequestIndexRoute
  '/supplier/': typeof SupplierIndexRoute
  '/request/$requestId/': typeof RequestRequestIdIndexRoute
  '/supplier/edit/': typeof SupplierEditIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/not-found'
    | '/recover'
    | '/register'
    | '/request'
    | '/reset-password'
    | '/supplier'
    | '/request/'
    | '/supplier/'
    | '/request/$requestId'
    | '/supplier/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/not-found'
    | '/recover'
    | '/register'
    | '/reset-password'
    | '/request'
    | '/supplier'
    | '/request/$requestId'
    | '/supplier/edit'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/not-found'
    | '/recover'
    | '/register'
    | '/request'
    | '/reset-password'
    | '/supplier'
    | '/request/'
    | '/supplier/'
    | '/request/$requestId/'
    | '/supplier/edit/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  LoginRouteRoute: typeof LoginRouteRoute
  NotFoundRouteRoute: typeof NotFoundRouteRoute
  RecoverRouteRoute: typeof RecoverRouteRoute
  RegisterRouteRoute: typeof RegisterRouteRoute
  RequestRouteRoute: typeof RequestRouteRouteWithChildren
  ResetPasswordRouteRoute: typeof ResetPasswordRouteRoute
  SupplierRouteRoute: typeof SupplierRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/supplier': {
      id: '/supplier'
      path: '/supplier'
      fullPath: '/supplier'
      preLoaderRoute: typeof SupplierRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/request': {
      id: '/request'
      path: '/request'
      fullPath: '/request'
      preLoaderRoute: typeof RequestRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recover': {
      id: '/recover'
      path: '/recover'
      fullPath: '/recover'
      preLoaderRoute: typeof RecoverRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/supplier/': {
      id: '/supplier/'
      path: '/'
      fullPath: '/supplier/'
      preLoaderRoute: typeof SupplierIndexRouteImport
      parentRoute: typeof SupplierRouteRoute
    }
    '/request/': {
      id: '/request/'
      path: '/'
      fullPath: '/request/'
      preLoaderRoute: typeof RequestIndexRouteImport
      parentRoute: typeof RequestRouteRoute
    }
    '/supplier/edit/': {
      id: '/supplier/edit/'
      path: '/edit'
      fullPath: '/supplier/edit'
      preLoaderRoute: typeof SupplierEditIndexRouteImport
      parentRoute: typeof SupplierRouteRoute
    }
    '/request/$requestId/': {
      id: '/request/$requestId/'
      path: '/$requestId'
      fullPath: '/request/$requestId'
      preLoaderRoute: typeof RequestRequestIdIndexRouteImport
      parentRoute: typeof RequestRouteRoute
    }
  }
}

interface RequestRouteRouteChildren {
  RequestIndexRoute: typeof RequestIndexRoute
  RequestRequestIdIndexRoute: typeof RequestRequestIdIndexRoute
}

const RequestRouteRouteChildren: RequestRouteRouteChildren = {
  RequestIndexRoute: RequestIndexRoute,
  RequestRequestIdIndexRoute: RequestRequestIdIndexRoute,
}

const RequestRouteRouteWithChildren = RequestRouteRoute._addFileChildren(
  RequestRouteRouteChildren,
)

interface SupplierRouteRouteChildren {
  SupplierIndexRoute: typeof SupplierIndexRoute
  SupplierEditIndexRoute: typeof SupplierEditIndexRoute
}

const SupplierRouteRouteChildren: SupplierRouteRouteChildren = {
  SupplierIndexRoute: SupplierIndexRoute,
  SupplierEditIndexRoute: SupplierEditIndexRoute,
}

const SupplierRouteRouteWithChildren = SupplierRouteRoute._addFileChildren(
  SupplierRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  LoginRouteRoute: LoginRouteRoute,
  NotFoundRouteRoute: NotFoundRouteRoute,
  RecoverRouteRoute: RecoverRouteRoute,
  RegisterRouteRoute: RegisterRouteRoute,
  RequestRouteRoute: RequestRouteRouteWithChildren,
  ResetPasswordRouteRoute: ResetPasswordRouteRoute,
  SupplierRouteRoute: SupplierRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
